#!/bin/bash

# Transhrimpment Case Study - Digital Investigation Demo
# This script demonstrates the CLI workflow for investigating supply chain fraud

# Change to project root for proper module resolution
cd ../../

# Initialize case study with fresh keys and configurations
echo "🔍 Initializing Transhrimpment Case Study"
echo "========================================"
bun src/cli.ts init-case-study --name transhrimpment
echo ""

REPORT_FILE="case-studies/transhrimpment/report.md"

# Initialize report file
cat > "$REPORT_FILE" << 'EOF'
# Transhrimpment Digital Investigation Report

*Generated by automated CLI analysis*

## Executive Summary

This report documents a digital forensic investigation of the "Transhrimpment" supply chain fraud case using verifiable credentials and cryptographic signatures to detect document tampering and identity theft.

---

EOF

echo "🔍 Starting Transhrimpment Digital Investigation Demo"
echo "=================================================="
echo "📄 Report will be generated in: $REPORT_FILE"

# Ensure output directories exist
mkdir -p case-studies/transhrimpment/{signed,controllers,keys,credentials,presentations}

echo ""
echo "📋 Step 1: Generate and Validate Controller Documents"
echo "===================================================="
echo "🔒 Reading PRIVATE entity configurations..."
echo "🌐 Generating PUBLIC controller documents (safe to share)..."
echo "🔍 Validating controller document security and structure..."

# Add controller generation section to report
cat >> "$REPORT_FILE" << 'EOF'
## Step 1: Controller Document Generation and Validation

Converting private entity configurations to public controller documents and validating their security:

### Supply Chain Entity Controllers

EOF

# Helper function to run command and capture REAL output for report
run_command_and_report() {
    local description="$1"
    local command="$2"
    local status_emoji="$3"

    echo "Running: $description..."

    # Run command and capture REAL output
    local output
    local exit_code
    output=$(eval "$command" 2>&1)
    exit_code=$?

    # Determine actual status based on exit code
    local actual_status
    if [ $exit_code -eq 0 ]; then
        actual_status="✅"
    else
        actual_status="❌"
    fi

    # Add REAL results to report with collapsible section
    echo "" >> "$REPORT_FILE"
    echo "<details>" >> "$REPORT_FILE"
    echo "<summary>$actual_status $description</summary>" >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE"
    echo '```bash' >> "$REPORT_FILE"
    echo "$ $command" >> "$REPORT_FILE"
    echo '```' >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE"
    echo '```' >> "$REPORT_FILE"
    echo "$output" >> "$REPORT_FILE"
    echo '```' >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE"
    echo "Exit code: $exit_code" >> "$REPORT_FILE"
    echo "</details>" >> "$REPORT_FILE"

    return $exit_code
}

# Generate and validate all controller documents
echo "Generating all controller documents..."

# Generate controllers for all entities
run_command_and_report \
    "Generate Chompchomp Controller" \
    "bun src/cli.ts generate-controller --config case-studies/transhrimpment/entity_configurations/chompchomp-config.json --out case-studies/transhrimpment/controllers/chompchomp-controller.json" \
    ""

run_command_and_report \
    "Generate Camarón Corriente Controller" \
    "bun src/cli.ts generate-controller --config case-studies/transhrimpment/entity_configurations/camaron-corriente-config.json --out case-studies/transhrimpment/controllers/camaron-corriente-controller.json" \
    ""

run_command_and_report \
    "Generate Legit Shrimp Controller" \
    "bun src/cli.ts generate-controller --config case-studies/transhrimpment/entity_configurations/legit-shrimp-config.json --out case-studies/transhrimpment/controllers/legit-shrimp-controller.json" \
    ""

run_command_and_report \
    "Generate Shady Carrier Controller" \
    "bun src/cli.ts generate-controller --config case-studies/transhrimpment/entity_configurations/shady-carrier-config.json --out case-studies/transhrimpment/controllers/shady-carrier-controller.json" \
    ""

run_command_and_report \
    "Generate Shady Distributor Controller" \
    "bun src/cli.ts generate-controller --config case-studies/transhrimpment/entity_configurations/shady-distributor-config.json --out case-studies/transhrimpment/controllers/shady-distributor-controller.json" \
    ""

run_command_and_report \
    "Generate Cargo Line Controller" \
    "bun src/cli.ts generate-controller --config case-studies/transhrimpment/entity_configurations/cargo-line-config.json --out case-studies/transhrimpment/controllers/cargo-line-controller.json" \
    ""

run_command_and_report \
    "Generate Anonymous Distributor Controller" \
    "bun src/cli.ts generate-controller --config case-studies/transhrimpment/entity_configurations/anonymous-distributor-config.json --out case-studies/transhrimpment/controllers/anonymous-distributor-controller.json" \
    ""

# Add validation subsection to report
echo "" >> "$REPORT_FILE"
echo "### Controller Document Validation" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"
echo "Validating all generated controller documents for security compliance and structural integrity:" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

echo ""
echo "Now validating all generated controller documents..."

# Validate all generated controllers
run_command_and_report \
    "Validate Chompchomp Controller" \
    "bun src/cli.ts validate-controller --controller case-studies/transhrimpment/controllers/chompchomp-controller.json" \
    ""

run_command_and_report \
    "Validate Camarón Corriente Controller" \
    "bun src/cli.ts validate-controller --controller case-studies/transhrimpment/controllers/camaron-corriente-controller.json" \
    ""

run_command_and_report \
    "Validate Legit Shrimp Controller" \
    "bun src/cli.ts validate-controller --controller case-studies/transhrimpment/controllers/legit-shrimp-controller.json" \
    ""

run_command_and_report \
    "Validate Shady Carrier Controller" \
    "bun src/cli.ts validate-controller --controller case-studies/transhrimpment/controllers/shady-carrier-controller.json" \
    ""

run_command_and_report \
    "Validate Shady Distributor Controller" \
    "bun src/cli.ts validate-controller --controller case-studies/transhrimpment/controllers/shady-distributor-controller.json" \
    ""

run_command_and_report \
    "Validate Cargo Line Controller" \
    "bun src/cli.ts validate-controller --controller case-studies/transhrimpment/controllers/cargo-line-controller.json" \
    ""

run_command_and_report \
    "Validate Anonymous Distributor Controller" \
    "bun src/cli.ts validate-controller --controller case-studies/transhrimpment/controllers/anonymous-distributor-controller.json" \
    ""

# Add GeoJSON rendering section
echo "" >> "$REPORT_FILE"
echo "### GeoJSON Rendering for Controller Documents" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"
echo "Rendering geographic data from controller documents to visualize entity locations:" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# Render GeoJSON from controller documents
echo ""
echo "🗺️ Step 2: Render GeoJSON from Controller Documents"
echo "=================================================="

for controller_file in case-studies/transhrimpment/controllers/*.json; do
    if [ -f "$controller_file" ]; then
        entity_name=$(basename "$controller_file" -controller.json)

        run_command_and_report \
            "Render GeoJSON for $entity_name" \
            "bun src/cli.ts render-geojson --controller $controller_file --out case-studies/transhrimpment/${entity_name}-location.geojson" \
            ""
    fi
done

# Add final summary based on ACTUAL results
echo "" >> "$REPORT_FILE"
cat >> "$REPORT_FILE" << 'EOF'

## Investigation Summary

### Digital Forensics Results

The investigation processed all entity controller documents and captured the real CLI command outputs above.

### Key Findings

The actual CLI command results show:
- Controller document generation status for each entity
- Validation results with real exit codes
- GeoJSON rendering success/failure for geographic visualization
- Any error messages or warnings from the actual CLI execution

### Next Steps

The generated controller documents can now be used to:
- Verify signatures on supply chain credentials
- Detect identity theft and document forgery
- Trace geographic movement of goods
- Validate entity legitimacy through identifier systems

**🔐 Controller document generation completed - see actual CLI results above!**

EOF

echo ""
echo "📊 Investigation completed! Report generated at: $REPORT_FILE"
echo "🗺️ Real CLI command outputs captured in report"
echo "🔒 All actual results documented"