#!/bin/bash

# Transhrimpment Case Study - Digital Investigation Demo
# This script demonstrates the CLI workflow for investigating supply chain fraud

# Change to project root for proper module resolution
cd ../../

REPORT_FILE="case-studies/transhrimpment/report.md"

# Initialize report file
cat > "$REPORT_FILE" << 'EOF'
# Transhrimpment Digital Investigation Report

*Generated by automated CLI analysis*

## Executive Summary

This report documents a digital forensic investigation of the "Transhrimpment" supply chain fraud case using verifiable credentials and cryptographic signatures to detect document tampering and identity theft.

---

EOF

echo "🔍 Starting Transhrimpment Digital Investigation Demo"
echo "=================================================="
echo "📄 Report will be generated in: $REPORT_FILE"

# Ensure output directories exist
mkdir -p case-studies/transhrimpment/{signed,controllers,keys}

echo ""
echo "📋 Step 1: Schema Validation"
echo "----------------------------"

# Add schema validation section to report
cat >> "$REPORT_FILE" << 'EOF'
## Step 1: Schema Validation

Before processing any supply chain documents, we validate all credential schemas to ensure data integrity:

EOF

# Helper function to run command and capture output for report
run_command_and_report() {
    local description="$1"
    local command="$2"
    local status_emoji="$3"

    echo "Running: $description..."

    # Run command and capture output
    local output
    local exit_code
    output=$(eval "$command" 2>&1)
    exit_code=$?

    # Add to report with collapsible section
    echo "" >> "$REPORT_FILE"
    echo "<details>" >> "$REPORT_FILE"
    echo "<summary>$status_emoji $description</summary>" >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE"
    echo '```bash' >> "$REPORT_FILE"
    echo "$ $command" >> "$REPORT_FILE"
    echo '```' >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE"
    echo '```' >> "$REPORT_FILE"
    echo "$output" >> "$REPORT_FILE"
    echo '```' >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE"
    echo "Exit code: $exit_code" >> "$REPORT_FILE"
    echo "</details>" >> "$REPORT_FILE"

    return $exit_code
}

# Validate all schemas and capture results
run_command_and_report \
    "Validate Purchase Order Schema" \
    "bun src/cli.ts validate-schema --schema case-studies/transhrimpment/schemas/purchase-order-credential.yaml" \
    "✅"

run_command_and_report \
    "Validate Commercial Invoice Schema" \
    "bun src/cli.ts validate-schema --schema case-studies/transhrimpment/schemas/commercial-invoice-credential.yaml" \
    "✅"

run_command_and_report \
    "Validate Certificate of Origin Schema" \
    "bun src/cli.ts validate-schema --schema case-studies/transhrimpment/schemas/certificate-of-origin-credential.yaml" \
    "✅"

run_command_and_report \
    "Validate Bill of Lading Schema" \
    "bun src/cli.ts validate-schema --schema case-studies/transhrimpment/schemas/bill-of-lading-credential.yaml" \
    "✅"

echo "" >> "$REPORT_FILE"
echo "All schemas validated successfully." >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"
echo "---" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

echo ""
echo "📝 Step 2: Generate and Validate Controller Documents"
echo "===================================================="
echo "🔒 Reading PRIVATE entity configurations..."
echo "🌐 Generating PUBLIC controller documents (safe to share)..."
echo "🔍 Validating controller document security and structure..."

# Add controller generation section to report
cat >> "$REPORT_FILE" << 'EOF'
## Step 2: Controller Document Generation and Validation

Converting private entity configurations to public controller documents and validating their security:

### Supply Chain Entity Controllers

EOF

# Generate and validate all controller documents
echo "Generating all controller documents first..."

# Generate controllers
run_command_and_report \
    "Generate Chompchomp Controller" \
    "bun src/cli.ts generate-controller --config case-studies/transhrimpment/entity_configurations/chompchomp-config.json --out case-studies/transhrimpment/controllers/chompchomp-controller.json" \
    "✅"

run_command_and_report \
    "Generate Camarón Corriente Controller" \
    "bun src/cli.ts generate-controller --config case-studies/transhrimpment/entity_configurations/camaron-corriente-config.json --out case-studies/transhrimpment/controllers/camaron-corriente-controller.json" \
    "✅"

run_command_and_report \
    "Generate Shady Carrier Controller" \
    "bun src/cli.ts generate-controller --config case-studies/transhrimpment/entity_configurations/shady-carrier-config.json --out case-studies/transhrimpment/controllers/shady-carrier-controller.json" \
    "⚠️"

run_command_and_report \
    "Generate Legit Shrimp Controller" \
    "bun src/cli.ts generate-controller --config case-studies/transhrimpment/entity_configurations/legit-shrimp-config.json --out case-studies/transhrimpment/controllers/legit-shrimp-controller.json" \
    "✅"

# Add validation subsection to report
echo "" >> "$REPORT_FILE"
echo "### Controller Document Validation" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"
echo "Validating all generated controller documents for security compliance and structural integrity:" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

echo ""
echo "Now validating all generated controller documents..."

# Validate all generated controllers
run_command_and_report \
    "Validate Chompchomp Controller (Legitimate)" \
    "bun src/cli.ts validate-controller --controller case-studies/transhrimpment/controllers/chompchomp-controller.json" \
    "✅"

run_command_and_report \
    "Validate Camarón Corriente Controller (Legitimate)" \
    "bun src/cli.ts validate-controller --controller case-studies/transhrimpment/controllers/camaron-corriente-controller.json" \
    "✅"

run_command_and_report \
    "Validate Shady Carrier Controller (Fraudulent Entity)" \
    "bun src/cli.ts validate-controller --controller case-studies/transhrimpment/controllers/shady-carrier-controller.json" \
    "⚠️"

run_command_and_report \
    "Validate Legit Shrimp Controller (Legitimate - Identity Will Be Stolen)" \
    "bun src/cli.ts validate-controller --controller case-studies/transhrimpment/controllers/legit-shrimp-controller.json" \
    "✅"

# Add a note about what controller validation ensures
echo "" >> "$REPORT_FILE"
echo "**Controller Validation Results:**" >> "$REPORT_FILE"
echo "- ✅ **Security Check**: Verified no private keys are exposed in public controller documents" >> "$REPORT_FILE"
echo "- ✅ **Schema Compliance**: All controllers follow the W3C Controller Document specification" >> "$REPORT_FILE"
echo "- ✅ **Key References**: Verification method references are properly structured" >> "$REPORT_FILE"
echo "- ✅ **SPICE GLUE Identifiers**: Legitimate entities have proper supply chain identifiers" >> "$REPORT_FILE"
echo "- ⚠️ **Fraud Note**: Shady entities lack legitimate supply chain identifiers (red flag)" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

echo "" >> "$REPORT_FILE"
echo "---" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

echo ""
echo "🔐 Step 3: Extract PUBLIC Keys for Verification"
echo "================================================"
echo "🔒 Reading PRIVATE entity configurations to extract PUBLIC keys..."

# Add key extraction section to report
cat >> "$REPORT_FILE" << 'EOF'
## Step 3: Public Key Extraction

Extracting public keys from private entity configurations for signature verification:

EOF

# Extract PUBLIC keys from PRIVATE entity configurations for verification
run_command_and_report \
    "Extract Chompchomp Public Keys" \
    "bun src/cli.ts extract-public-key --key case-studies/transhrimpment/entity_configurations/chompchomp-config.json --out case-studies/transhrimpment/keys/chompchomp-public.json" \
    "🔑"

run_command_and_report \
    "Extract Camarón Corriente Public Keys" \
    "bun src/cli.ts extract-public-key --key case-studies/transhrimpment/entity_configurations/camaron-corriente-config.json --out case-studies/transhrimpment/keys/camaron-corriente-public.json" \
    "🔑"

run_command_and_report \
    "Extract Shady Carrier Public Keys" \
    "bun src/cli.ts extract-public-key --key case-studies/transhrimpment/entity_configurations/shady-carrier-config.json --out case-studies/transhrimpment/keys/shady-carrier-public.json" \
    "🔑"

run_command_and_report \
    "Extract Legit Shrimp Public Keys" \
    "bun src/cli.ts extract-public-key --key case-studies/transhrimpment/entity_configurations/legit-shrimp-config.json --out case-studies/transhrimpment/keys/legit-shrimp-public.json" \
    "🔑"

echo "" >> "$REPORT_FILE"
echo "---" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

echo ""
echo "✍️  Step 4: Sign Supply Chain Credentials"
echo "==========================================="
echo "🔒 Using PRIVATE entity configurations to sign documents..."

# Add credential signing section to report
cat >> "$REPORT_FILE" << 'EOF'
## Step 4: Supply Chain Document Signing

Following the fraudulent transaction timeline, signing each document with the respective entity's private keys:

### Document Processing

EOF

# Sign credentials following the fraud timeline using PRIVATE keys
run_command_and_report \
    "Sign Purchase Order (Chompchomp)" \
    "bun src/cli.ts sign-credential --key case-studies/transhrimpment/entity_configurations/chompchomp-config.json --cred case-studies/transhrimpment/credentials/purchase-order.json --out case-studies/transhrimpment/signed/purchase-order-signed.json" \
    "✅"

run_command_and_report \
    "Sign Commercial Invoice (Camarón Corriente)" \
    "bun src/cli.ts sign-credential --key case-studies/transhrimpment/entity_configurations/camaron-corriente-config.json --cred case-studies/transhrimpment/credentials/commercial-invoice.json --out case-studies/transhrimpment/signed/commercial-invoice-signed.json" \
    "✅"

run_command_and_report \
    "Sign Bill of Lading (Shady Carrier - FRAUD!)" \
    "bun src/cli.ts sign-credential --key case-studies/transhrimpment/entity_configurations/shady-carrier-config.json --cred case-studies/transhrimpment/credentials/bill-of-lading.json --out case-studies/transhrimpment/signed/bill-of-lading-signed.json" \
    "⚠️"

echo "⚠️  FRAUD ATTEMPT: Shady Distributor using their PRIVATE keys but claiming to be Legit Shrimp..."
run_command_and_report \
    "Sign Certificate of Origin (FORGED by Shady Distributor)" \
    "bun src/cli.ts sign-credential --key case-studies/transhrimpment/entity_configurations/shady-distributor-config.json --cred case-studies/transhrimpment/credentials/certificate-of-origin.json --out case-studies/transhrimpment/signed/certificate-of-origin-signed.json" \
    "🚨"

echo "" >> "$REPORT_FILE"
echo "---" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

echo ""
echo "🗺️ Step 5: Geographic Data Analysis"
echo "===================================="
echo "📍 Analyzing GeoJSON data in supply chain credentials..."

# Add geographic analysis section to report
cat >> "$REPORT_FILE" << 'EOF'
## Step 5: Geographic Data Analysis

Analyzing embedded GeoJSON content in supply chain credentials to track shipment routes and geographic context:

### Geographic Route Analysis

EOF

# Analyze GeoJSON in Bill of Lading (contains shipping route)
run_command_and_report \
    "Analyze Bill of Lading Shipping Route" \
    "bun src/cli.ts analyze-geojson --cred case-studies/transhrimpment/credentials/bill-of-lading.json --out case-studies/transhrimpment/bill-of-lading-route-analysis.md" \
    "🗺️"

echo "" >> "$REPORT_FILE"
echo "---" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

echo ""
echo "🔍 Step 6: Verification and Fraud Detection"
echo "==========================================="

# Add verification section to report
cat >> "$REPORT_FILE" << 'EOF'
## Step 6: Digital Verification and Fraud Detection

Using public key cryptography to verify the authenticity of signed supply chain documents:

### Legitimate Document Verification

EOF

run_command_and_report \
    "Verify Purchase Order (Chompchomp)" \
    "bun src/cli.ts verify-credential --cred case-studies/transhrimpment/signed/purchase-order-signed.json --key case-studies/transhrimpment/keys/chompchomp-public.json" \
    "✅"

run_command_and_report \
    "Verify Commercial Invoice (Camarón Corriente)" \
    "bun src/cli.ts verify-credential --cred case-studies/transhrimpment/signed/commercial-invoice-signed.json --key case-studies/transhrimpment/keys/camaron-corriente-public.json" \
    "✅"

# Add fraud detection subsection
echo "" >> "$REPORT_FILE"
echo "### Fraud Detection" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"
echo "Testing signatures against expected entities to detect fraud:" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

run_command_and_report \
    "Verify Bill of Lading (Valid signature but quantity discrepancy)" \
    "bun src/cli.ts verify-credential --cred case-studies/transhrimpment/signed/bill-of-lading-signed.json --key case-studies/transhrimpment/keys/shady-carrier-public.json" \
    "⚠️"

echo "🚨 FRAUD DETECTION: Testing Certificate of Origin against Legit Shrimp's PUBLIC key..."
echo "This SHOULD FAIL because Shady Distributor signed it with their PRIVATE keys:"
# Use a special version that allows failure for fraud detection
echo "" >> "$REPORT_FILE"
echo "<details>" >> "$REPORT_FILE"
echo "<summary>🚨 Verify Certificate of Origin (FRAUD DETECTION)</summary>" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"
echo '```bash' >> "$REPORT_FILE"
echo "$ bun src/cli.ts verify-credential --cred case-studies/transhrimpment/signed/certificate-of-origin-signed.json --key case-studies/transhrimpment/keys/legit-shrimp-public.json" >> "$REPORT_FILE"
echo '```' >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"
echo '```' >> "$REPORT_FILE"
bun src/cli.ts verify-credential --cred case-studies/transhrimpment/signed/certificate-of-origin-signed.json --key case-studies/transhrimpment/keys/legit-shrimp-public.json 2>&1 >> "$REPORT_FILE" || echo "❌ VERIFICATION FAILED - SIGNATURE MISMATCH = FRAUD DETECTED!" >> "$REPORT_FILE"
echo '```' >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"
echo "**Result: FRAUD DETECTED** - Wrong private key used to sign certificate!" >> "$REPORT_FILE"
echo "</details>" >> "$REPORT_FILE"

# Add final investigation summary
cat >> "$REPORT_FILE" << 'EOF'

---

## Investigation Summary

### Digital Forensics Results

| Document | Signer | Signature Status | Content Analysis | Fraud Indicator |
|----------|--------|------------------|-------------------|----------------|
| **Purchase Order** | Chompchomp Ltd | ✅ Valid | 1000kg shrimp ordered | ✅ Legitimate |
| **Commercial Invoice** | Camarón Corriente S.A. | ✅ Valid | 1000kg billed | ✅ Legitimate |
| **Bill of Lading** | Shady Carrier Ltd | ✅ Valid signature | ⚠️ Only 800kg shipped | 🚨 **200kg theft** |
| **Certificate of Origin** | Expected: Legit Shrimp Ltd | ❌ **WRONG SIGNATURE** | Claims legitimate origin | 🚨 **Identity theft/forgery** |

### Key Findings

🎯 **Quantity Fraud**: 200kg of shrimp stolen during transit (1000kg invoiced → 800kg shipped)

🎯 **Document Forgery**: Certificate of Origin forged by Shady Distributor using stolen identity

🎯 **Chain of Custody Breach**: Fraud occurred at Shady Carrier during transportation

🎯 **Digital Evidence**: Cryptographic signatures mathematically prove:
- Purchase Order and Commercial Invoice are authentic
- Bill of Lading has valid signature but shows quantity theft
- Certificate of Origin is forged (wrong private key used)

### Fraud Detection Method

**Verifiable Credentials + Public Key Cryptography = Tamper-Proof Supply Chain**

Each entity's private keys are used to sign documents, while public keys verify authenticity. Any attempt to forge documents or steal identities is immediately detected through signature verification.

**🔐 Digital forensics using verifiable credentials successfully exposed the entire fraud scheme!**

EOF

echo ""
echo "📊 Investigation completed! Report generated at: $REPORT_FILE"