/**
 * Entity Report Generation Utilities
 *
 * Generates markdown reports for entity identification and analysis
 * in supply chain fraud investigations.
 */

import { analyzeGeoJSON } from '../geojson/detector';
import { geoJSONToMarkdown } from '../geojson/markdown';

export interface ControllerValidationResult {
  isValid: boolean;
  errorMessage?: string;
}

export interface EntityReportOptions {
  entityName: string;
  controllerDocument: any;
  validationResult: ControllerValidationResult;
  includeControllerDocument?: boolean;
  includeGeoJSONAnalysis?: boolean;
}

export interface EntityReportSection {
  title: string;
  content: string;
}

/**
 * Generates a complete entity report with collapsible sections
 */
export function generateEntityReport(options: EntityReportOptions): string {
  const {
    entityName,
    controllerDocument,
    validationResult,
    includeControllerDocument = true,
    includeGeoJSONAnalysis = true
  } = options;

  const sections: string[] = [];

  // Entity header
  const statusEmoji = validationResult.isValid ? '‚úÖ' : '‚ùå';
  sections.push(`### ${statusEmoji} ${entityName}`);
  sections.push('');

  sections.push('');

  // Controller document section
  if (includeControllerDocument) {
    sections.push(generateControllerDocumentSection(controllerDocument));
    sections.push('');
  }

  // GeoJSON analysis section
  if (includeGeoJSONAnalysis && validationResult.isValid) {
    sections.push(generateGeoJSONSection(controllerDocument));
    sections.push('');
  }

  return sections.join('\n');
}

/**
 * Generates collapsible controller document section
 */
export function generateControllerDocumentSection(controllerDocument: any): string {
  const lines: string[] = [];

  lines.push('<details>');
  lines.push('<summary>üìÑ View Controller Document</summary>');
  lines.push('');
  lines.push('```jsonc');

  // Truncate JSON to 16 lines to keep report manageable
  const jsonLines = JSON.stringify(controllerDocument, null, 2).split('\n');
  let content = '';

  if (jsonLines.length > 16) {
    const truncatedLines = jsonLines.slice(0, 14);
    content = truncatedLines.join('\n') + '\n  // ... (truncated for brevity)\n}';
  } else {
    content = jsonLines.join('\n');
  }

  lines.push(content);
  lines.push('```');
  lines.push('');
  lines.push('</details>');

  return lines.join('\n');
}

/**
 * Generates collapsible GeoJSON analysis section
 */
export function generateGeoJSONSection(controllerDocument: any): string {
  const lines: string[] = [];

  try {
    // Analyze the GeoJSON content
    const analysis = analyzeGeoJSON(controllerDocument);

    if (!analysis || analysis.type === 'None') {
      lines.push('<details>');
      lines.push('<summary>üìç View Geographic Analysis</summary>');
      lines.push('');
      lines.push('No geographic data detected in this controller document.');
      lines.push('');
      lines.push('</details>');
      return lines.join('\n');
    }

    // Create custom collapsible section with extracted content
    lines.push('<details>');
    lines.push('<summary>üìç View Geographic Analysis</summary>');
    lines.push('');

    // Generate the markdown content and extract the inner content
    const fullMarkdown = geoJSONToMarkdown(controllerDocument, analysis, {
      title: `Entity Geographic Information - ${analysis.description}`,
      showAnalysis: true,
      showCoordinates: true,
      showProperties: true
    });

    // Extract content between <summary> and </details> tags
    const summaryMatch = fullMarkdown.match(/<summary>.*?<\/summary>\n\n(.*)\n<\/details>/s);
    if (summaryMatch && summaryMatch[1]) {
      lines.push(summaryMatch[1]);
    } else {
      // Fallback: include the full content minus the outer details tags
      const contentWithoutTags = fullMarkdown
        .replace(/<details>\n<summary>.*?<\/summary>\n/, '')
        .replace(/\n<\/details>$/, '');
      lines.push(contentWithoutTags);
    }

    lines.push('');
    lines.push('</details>');

  } catch (error) {
    lines.push('<details>');
    lines.push('<summary>üìç View Geographic Analysis</summary>');
    lines.push('');
    lines.push(`‚ùå Error analyzing geographic data: ${error instanceof Error ? error.message : 'Unknown error'}`);
    lines.push('');
    lines.push('</details>');
  }

  return lines.join('\n');
}

/**
 * Generates a complete investigation report with multiple entities
 */
export function generateInvestigationReport(
  title: string,
  summary: string,
  entities: EntityReportOptions[]
): string {
  const lines: string[] = [];

  // Report header
  lines.push(`# ${title}`);
  lines.push('');
  lines.push('*Generated by automated CLI analysis*');
  lines.push('');

  // Executive summary
  lines.push('## Executive Summary');
  lines.push('');
  lines.push(summary);
  lines.push('');
  lines.push('---');
  lines.push('');

  // Step 1: Identify Entities
  lines.push('## Step 1: Identify Entities');
  lines.push('');
  lines.push('Identifying supply chain entities through their geographic locations and validating their controller documents:');
  lines.push('');

  // Generate each entity section
  entities.forEach(entityOptions => {
    lines.push(generateEntityReport(entityOptions));
  });

  // Investigation summary
  lines.push('');
  lines.push('## Investigation Summary');
  lines.push('');
  lines.push('### Entity Identification Results');
  lines.push('');
  lines.push('The investigation successfully identified all supply chain entities through their controller documents and geographic locations.');
  lines.push('');
  lines.push('### Key Findings');
  lines.push('');
  lines.push('- All entities validated successfully with geographic locations confirmed');
  lines.push('- Map previews generated showing entity distribution across the Caribbean region');
  lines.push('- Controller documents contain proper cryptographic verification methods');
  lines.push('- Legitimate and fraudulent entities geographically mapped for analysis');
  lines.push('');
  lines.push('### Next Steps');
  lines.push('');
  lines.push('The identified entities and their geographic information can now be used to:');
  lines.push('- Trace shipment routes and detect deviations');
  lines.push('- Verify entity legitimacy through location analysis');
  lines.push('- Detect suspicious geographic patterns in fraud schemes');
  lines.push('- Validate supply chain documents against known entity locations');
  lines.push('');
  lines.push('**üîç Entity identification completed - geographic fraud detection enabled!**');

  return lines.join('\n');
}

/**
 * Validates a controller document (stub for now - should integrate with existing validation)
 */
export async function validateControllerDocument(
  controllerDocument: any,
  schemaPath: string
): Promise<ControllerValidationResult> {
  // TODO: This should integrate with the existing validate-controller CLI functionality
  // For now, we'll assume validation passes if the document has required fields
  try {
    if (!controllerDocument || typeof controllerDocument !== 'object') {
      return { isValid: false, errorMessage: 'Invalid controller document format' };
    }

    if (!controllerDocument.id || !controllerDocument.verificationMethod) {
      return { isValid: false, errorMessage: 'Missing required fields: id or verificationMethod' };
    }

    return { isValid: true };
  } catch (error) {
    return {
      isValid: false,
      errorMessage: error instanceof Error ? error.message : 'Unknown validation error'
    };
  }
}